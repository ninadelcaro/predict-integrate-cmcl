if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
print(model.comparison(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
library(sjPlot)
install.packages("sjPlot")
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(get(y))) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
cowplot::plot_grid(
plot_model(mod1)$temp,
plot_model(mod2)
)
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
install.packages("cowplot")
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
library(sjPlot)
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(get(y))) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
cowplot::plot_grid(
plot_model(mod1)$temp,
plot_model(mod2)
)
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(get(y))) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1)$temp,
plot_model(mod2)
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(get(y))) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, terms="rnn_entropy"),
plot_model(mod2)
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(get(y))) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="pred", terms="rnn_entropy"),
plot_model(mod2)
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(get(y))) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="pred"),
plot_model(mod2)
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(get(y))) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="fe"),
plot_model(mod2)
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(get(y))) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="eff"),
plot_model(mod2)
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(get(y))) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="eff", terms="rnn_entropy"),
plot_model(mod2)
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(y, df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(firstfix.dur.orig)) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="eff", terms="rnn_entropy"),
plot_model(mod2)
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2("firstfix.dur.orig", df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(firstfix.dur.orig)) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="pred", terms="rnn_entropy"),
plot_model(mod2, type="eff", terms="rnn_surprisal"),
plot_model(mod2, type="pred", terms="rnn_surprisal")
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2(df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(firstfix.dur.orig)) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="eff", terms="rnn_entropy"),
plot_model(mod2, type="eff", terms="rnn_surprisal"),
plot_model(mod2, type="eff", terms="rnn_surprisal")
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2(df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(firstfix.dur.orig)) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="eff", terms="rnn_entropy"),
plot_model(mod2, type="eff", terms="rnn_surprisal"),
plot_model(mod3, type="eff", terms="drnn_entropy")
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2(df_en, 1)
nested_models_analysis_no_interaction_v2 <- function(df, log_transform=0, path_results) {
# function that performs the analysis using nested models
# x_rnn: rnn metrics, a vector of strings
# x_drnn: drnn metrics, a vector of strings
# y: dependent variable
# df: data
# log_transform: if set to 1, the dependent variable is log-transformed
# path_results: if present, the results of the log likelihood ratio test will
# be saved as a plaintext file
if (log_transform == 1){
mod0 <- lmer(log(abs(firstfix.dur.orig)) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
} else {
mod0 <- lmer(get(y) ~ word_len + sent_id_and_idx + word_idx + (1 | participant) + (1 | word), data = df, control = lmerControl(optimizer ="Nelder_Mead"))
}
# test main effects of rnn and lang on human metric:
mod1 <- update(mod0, . ~ . + rnn_entropy)
mod2 <- update(mod1, . ~ . + rnn_surprisal)
mod3 <- update(mod2, . ~ . + drnn_entropy)
print(cowplot::plot_grid(
plot_model(mod1, type="eff", terms="rnn_entropy"),
plot_model(mod2, type="eff", terms="rnn_surprisal"),
plot_model(mod3, type="eff", terms="drnn_entropy")
))
# if path is provided then results will be saved there
if(!missing(path_results)){
sink(path_results)
print(anova(mod2, mod3)) # expect models to be significantly better / have lower AIC
sink()
} else{
print(anova(mod0, mod2, mod3)) # expect models to be significantly better / have lower AIC
print(anova(mod2, mod3))
}
# provide model summary
# summ(mod4)
}
nested_models_analysis_no_interaction_v2(df_hi, 1)
